#!/bin/bash

function command_exists {
  #this should be a very portable way of checking if something is on the path
  #usage: "if command_exists foo; then echo it exists; fi"
  type "$1" &> /dev/null
}

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  TARGET="$(readlink "${SOURCE}")"
  if [[ $SOURCE == /* ]]; then
    SOURCE="${TARGET}"
  else
    DIR="$( dirname "${SOURCE}" )"
    SOURCE="{$DIR}/${TARGET}" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  fi
done

SOAJS_INSTALLER="$( cd -P "$( dirname "${SOURCE}" )" && pwd )"

#location of /usr/bin based on operating system
BINLOCATION=''

# check the platform to determine which node to use: linux | darwin
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then

	# install make, it is needed
	apt-get install -y make

	BINLOCATION='/usr/bin'
	NODE_LOCATION="node-8.12.0/node-linux-x64"

elif [[ "$unamestr" == 'Darwin' ]]; then
	BINLOCATION='/usr/local/bin'
	NODE_LOCATION="node-8.12.0/node-darwin-x64"
	if [ ! -d "${BINLOCATION}" ]; then
        mkdir -p ${BINLOCATION}
    fi
fi

if command_exists git; then
    pushd ${BINLOCATION} > /dev/null 2>&1

    rm -f soajs
    echo "Creating soajs command @: ${BINLOCATION}"
    ln -s ${SOAJS_INSTALLER}/bin/soajs .

    if [ ! -e node ]; then
        rm -f node
        echo "Creating node command @: ${BINLOCATION}"
        ln -s ${SOAJS_INSTALLER}/include/${NODE_LOCATION}/bin/node .
    fi

    pushd ${SOAJS_INSTALLER} > /dev/null 2>&1
	rm -rf soajs.installer.local
	git clone https://github.com/soajs/soajs.installer.local.git
	rm -rf soajs.installer.remote
	git clone https://github.com/soajs/soajs.installer.remote.git
	rm -rf soajs.installer.versions
	git clone https://github.com/soajs/soajs.installer.versions.git

    echo "Done successfully"
else

    echo "You need to install git and re-run ./INSTALL again"
fi