{% import "resource-partial.njk" as resource %}
{% import "method-partial.njk" as method %}
{% set lb = "{" %}
{% set rb = "}" %}
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {createAPIRequest} from '../../lib/apirequest';
{% set Name = api.name|capitalize %}
{% if api.version %}
{% set Version = api.version|replace('\.', '_')|capitalize %}
{% endif %}
{% set Namespace = [Name, Version]|join('') %}

/**
 * {{ api.title }}
 *
 * {{ api.description | oneLine }}
 *
 * @example
 * const google = require('googleapis');
 * const {{ api.name }} = google.{{ api.name }}('{{ api.version }}');
 *
 * @namespace {{ api.name }}
 * @type {Function}
 * @version {{ api.version }}
 * @variation {{ api.version }}
 * @param {object=} options Options for {{ Name }}
 */
function {{ Name }} (options) {
  const self = this;
  self._options = options || {};
{% if api.methods %}
  {% for mname, m in api.methods|dictsort %}
    {{ method.render(m, mname, api, true) }}
  {% endfor %}
{% endif %}
{% if api.resources %}
{% for rname, r in api.resources|dictsort %}
  self.{{ rname }} = {
    {{ resource.render(r, api, false) }}
  };
{% endfor %}
{% endif %}
}
{% if api.schemas %}
{% for schemaName, schema in api.schemas|dictsort %}
/**
 * @typedef {{ schema.id | oneLine }}
 * @memberOf! {{ api.name }}({{ api.version }})
 * @type {{ schema.type | oneLine }}
{% if schema.properties %}
{% for pname, p in schema.properties|dictsort %}
{% if p.$ref %}
 * @property {{ lb }}{{ api.name }}({{ api.version }}).{{ p.$ref }}{{ rb }} {{ pname }} {{ p.description | cleanPaths | oneLine }}
{% elif p.items and p.items.type %}
 * @property {{ lb }}{{ p.items.type }}[]{{ rb }} {{ pname }} {{ p.description | cleanPaths | oneLine }}
{% elif p.items and p.items.$ref %}
 * @property {{ lb }}{{ api.name }}({{ api.version }}).{{ p.items.$ref }}[]{{ rb }} {{ pname }} {{ p.description | cleanPaths | oneLine }}
{% else %}
 * @property {{ lb }}{{ p.type }}{{ rb }} {{ pname }} {{ p.description | cleanPaths | oneLine }}
{% endif %}
{% endfor %}
{% endif %}
 */
{% endfor %}
{% endif %}

export = {{ Name }};
