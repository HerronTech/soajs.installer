"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var apirequest_1 = require("../../lib/apirequest");
/**
 * Fitness
 *
 * Stores and accesses user data in the fitness store from apps on any platform.
 *
 * @example
 * const google = require('googleapis');
 * const fitness = google.fitness('v1');
 *
 * @namespace fitness
 * @type {Function}
 * @version v1
 * @variation v1
 * @param {object=} options Options for Fitness
 */
function Fitness(options) {
    var self = this;
    self._options = options || {};
    self.users = {
        dataset: {
            /**
             * fitness.users.dataset.aggregate
             * @desc Aggregates data of a certain type or stream into buckets divided
             * by a given type of boundary. Multiple data sets of multiple types and
             * from multiple sources can be aggreated into exactly one bucket type per
             * request.
             * @alias fitness.users.dataset.aggregate
             * @memberOf! fitness(v1)
             *
             * @param {object} params Parameters for request
             * @param {string} params.userId Aggregate data for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
             * @param {fitness(v1).AggregateRequest} params.resource Request body data
             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
             * @param {callback} callback The callback that handles the response.
             * @return {object} Request object
             */
            aggregate: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options = options || {};
                var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
                var parameters = {
                    options: Object.assign({
                        url: (rootUrl + '/fitness/v1/users/{userId}/dataset:aggregate')
                            .replace(/([^:]\/)\/+/g, '$1'),
                        method: 'POST'
                    }, options),
                    params: params,
                    requiredParams: ['userId'],
                    pathParams: ['userId'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            }
        },
        dataSources: {
            /**
             * fitness.users.dataSources.create
             * @desc Creates a new data source that is unique across all data sources
             * belonging to this user. The data stream ID field can be omitted and
             * will be generated by the server with the correct format. The data
             * stream ID is an ordered combination of some fields from the data
             * source. In addition to the data source fields reflected into the data
             * source ID, the developer project number that is authenticated when
             * creating the data source is included. This developer project number is
             * obfuscated when read by any other developer reading public data types.
             * @alias fitness.users.dataSources.create
             * @memberOf! fitness(v1)
             *
             * @param {object} params Parameters for request
             * @param {string} params.userId Create the data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
             * @param {fitness(v1).DataSource} params.resource Request body data
             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
             * @param {callback} callback The callback that handles the response.
             * @return {object} Request object
             */
            create: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options = options || {};
                var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
                var parameters = {
                    options: Object.assign({
                        url: (rootUrl + '/fitness/v1/users/{userId}/dataSources')
                            .replace(/([^:]\/)\/+/g, '$1'),
                        method: 'POST'
                    }, options),
                    params: params,
                    requiredParams: ['userId'],
                    pathParams: ['userId'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            },
            delete: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options = options || {};
                var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
                var parameters = {
                    options: Object.assign({
                        url: (rootUrl +
                            '/fitness/v1/users/{userId}/dataSources/{dataSourceId}')
                            .replace(/([^:]\/)\/+/g, '$1'),
                        method: 'DELETE'
                    }, options),
                    params: params,
                    requiredParams: ['userId', 'dataSourceId'],
                    pathParams: ['dataSourceId', 'userId'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            },
            get: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options = options || {};
                var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
                var parameters = {
                    options: Object.assign({
                        url: (rootUrl +
                            '/fitness/v1/users/{userId}/dataSources/{dataSourceId}')
                            .replace(/([^:]\/)\/+/g, '$1'),
                        method: 'GET'
                    }, options),
                    params: params,
                    requiredParams: ['userId', 'dataSourceId'],
                    pathParams: ['dataSourceId', 'userId'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            },
            list: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options = options || {};
                var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
                var parameters = {
                    options: Object.assign({
                        url: (rootUrl + '/fitness/v1/users/{userId}/dataSources')
                            .replace(/([^:]\/)\/+/g, '$1'),
                        method: 'GET'
                    }, options),
                    params: params,
                    requiredParams: ['userId'],
                    pathParams: ['userId'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            },
            patch: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options = options || {};
                var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
                var parameters = {
                    options: Object.assign({
                        url: (rootUrl +
                            '/fitness/v1/users/{userId}/dataSources/{dataSourceId}')
                            .replace(/([^:]\/)\/+/g, '$1'),
                        method: 'PATCH'
                    }, options),
                    params: params,
                    requiredParams: ['userId', 'dataSourceId'],
                    pathParams: ['dataSourceId', 'userId'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            },
            update: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options = options || {};
                var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
                var parameters = {
                    options: Object.assign({
                        url: (rootUrl +
                            '/fitness/v1/users/{userId}/dataSources/{dataSourceId}')
                            .replace(/([^:]\/)\/+/g, '$1'),
                        method: 'PUT'
                    }, options),
                    params: params,
                    requiredParams: ['userId', 'dataSourceId'],
                    pathParams: ['dataSourceId', 'userId'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            },
            dataPointChanges: {
                /**
                 * fitness.users.dataSources.dataPointChanges.list
                 * @desc Queries for user's data point changes for a particular data
                 * source.
                 * @alias fitness.users.dataSources.dataPointChanges.list
                 * @memberOf! fitness(v1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string} params.dataSourceId The data stream ID of the data source that created the dataset.
                 * @param {integer=} params.limit If specified, no more than this many data point changes will be included in the response.
                 * @param {string=} params.pageToken The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.
                 * @param {string} params.userId List data points for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                list: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options = options || {};
                    var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
                    var parameters = {
                        options: Object.assign({
                            url: (rootUrl +
                                '/fitness/v1/users/{userId}/dataSources/{dataSourceId}/dataPointChanges')
                                .replace(/([^:]\/)\/+/g, '$1'),
                            method: 'GET'
                        }, options),
                        params: params,
                        requiredParams: ['userId', 'dataSourceId'],
                        pathParams: ['dataSourceId', 'userId'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                }
            },
            datasets: {
                /**
                 * fitness.users.dataSources.datasets.delete
                 * @desc Performs an inclusive delete of all data points whose start and
                 * end times have any overlap with the time range specified by the
                 * dataset ID. For most data types, the entire data point will be
                 * deleted. For data types where the time span represents a consistent
                 * value (such as com.google.activity.segment), and a data point
                 * straddles either end point of the dataset, only the overlapping
                 * portion of the data point will be deleted.
                 * @alias fitness.users.dataSources.datasets.delete
                 * @memberOf! fitness(v1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string=} params.currentTimeMillis The client's current time in milliseconds since epoch.
                 * @param {string} params.datasetId Dataset identifier that is a composite of the minimum data point start time and maximum data point end time represented as nanoseconds from the epoch. The ID is formatted like: "startTime-endTime" where startTime and endTime are 64 bit integers.
                 * @param {string} params.dataSourceId The data stream ID of the data source that created the dataset.
                 * @param {string=} params.modifiedTimeMillis When the operation was performed on the client.
                 * @param {string} params.userId Delete a dataset for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                delete: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options = options || {};
                    var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
                    var parameters = {
                        options: Object.assign({
                            url: (rootUrl +
                                '/fitness/v1/users/{userId}/dataSources/{dataSourceId}/datasets/{datasetId}')
                                .replace(/([^:]\/)\/+/g, '$1'),
                            method: 'DELETE'
                        }, options),
                        params: params,
                        requiredParams: ['userId', 'dataSourceId', 'datasetId'],
                        pathParams: ['datasetId', 'dataSourceId', 'userId'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                get: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options = options || {};
                    var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
                    var parameters = {
                        options: Object.assign({
                            url: (rootUrl +
                                '/fitness/v1/users/{userId}/dataSources/{dataSourceId}/datasets/{datasetId}')
                                .replace(/([^:]\/)\/+/g, '$1'),
                            method: 'GET'
                        }, options),
                        params: params,
                        requiredParams: ['userId', 'dataSourceId', 'datasetId'],
                        pathParams: ['datasetId', 'dataSourceId', 'userId'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                patch: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options = options || {};
                    var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
                    var parameters = {
                        options: Object.assign({
                            url: (rootUrl +
                                '/fitness/v1/users/{userId}/dataSources/{dataSourceId}/datasets/{datasetId}')
                                .replace(/([^:]\/)\/+/g, '$1'),
                            method: 'PATCH'
                        }, options),
                        params: params,
                        requiredParams: ['userId', 'dataSourceId', 'datasetId'],
                        pathParams: ['datasetId', 'dataSourceId', 'userId'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                }
            }
        },
        sessions: {
            /**
             * fitness.users.sessions.delete
             * @desc Deletes a session specified by the given session ID.
             * @alias fitness.users.sessions.delete
             * @memberOf! fitness(v1)
             *
             * @param {object} params Parameters for request
             * @param {string=} params.currentTimeMillis The client's current time in milliseconds since epoch.
             * @param {string} params.sessionId The ID of the session to be deleted.
             * @param {string} params.userId Delete a session for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
             * @param {callback} callback The callback that handles the response.
             * @return {object} Request object
             */
            delete: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options = options || {};
                var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
                var parameters = {
                    options: Object.assign({
                        url: (rootUrl +
                            '/fitness/v1/users/{userId}/sessions/{sessionId}')
                            .replace(/([^:]\/)\/+/g, '$1'),
                        method: 'DELETE'
                    }, options),
                    params: params,
                    requiredParams: ['userId', 'sessionId'],
                    pathParams: ['sessionId', 'userId'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            },
            list: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options = options || {};
                var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
                var parameters = {
                    options: Object.assign({
                        url: (rootUrl + '/fitness/v1/users/{userId}/sessions')
                            .replace(/([^:]\/)\/+/g, '$1'),
                        method: 'GET'
                    }, options),
                    params: params,
                    requiredParams: ['userId'],
                    pathParams: ['userId'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            },
            update: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options = options || {};
                var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
                var parameters = {
                    options: Object.assign({
                        url: (rootUrl +
                            '/fitness/v1/users/{userId}/sessions/{sessionId}')
                            .replace(/([^:]\/)\/+/g, '$1'),
                        method: 'PUT'
                    }, options),
                    params: params,
                    requiredParams: ['userId', 'sessionId'],
                    pathParams: ['sessionId', 'userId'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            }
        }
    };
}
module.exports = Fitness;
//# sourceMappingURL=v1.js.map