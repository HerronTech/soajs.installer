export interface GeneratorOptions {
    debug?: boolean;
    includePrivate?: boolean;
}
export declare class Generator {
    private transporter;
    private requestQueue;
    private env;
    /**
     * A multi-line string is turned into one line.
     *
     * @private
     * @param  {string} str String to process
     * @return {string}     Single line string processed
     */
    private oneLine(str?);
    /**
     * Clean a string of comment tags.
     *
     * @private
     * @param  {string} str String to process
     * @return {string}     Single line string processed
     */
    private cleanComments(str?);
    private getPathParams(params);
    private getSafeParamName(param);
    private options;
    private state;
    /**
     * Generator for generating API endpoints
     *
     * @private
     * @param {object} options Options for generation
     * @this {Generator}
     */
    constructor(options?: GeneratorOptions);
    /**
     * Add a requests to the rate limited queue.
     * @param opts Options to pass to the default transporter
     * @param callback
     */
    private makeRequest(opts, callback);
    /**
     * Log output of generator
     * Works just like console.log
     */
    private log(...args);
    /**
     * Write to the state log, which is used for debugging.
     * @param id DiscoveryRestUrl of the endpoint to log
     * @param message
     */
    private logResult(id, message);
    /**
     * Generate all APIs and write to files.
     *
     * @param {function} callback Callback when all APIs have been generated
     * @throws {Error} If there is an error generating any of the APIs
     */
    generateAllAPIs(callback: Function): void;
    generateIndex(callback: Function): void;
    /**
     * Given a discovery doc, parse it and recursively iterate over the various
     * embedded links.
     * @param api
     * @param schema
     * @param apiPath
     * @param tasks
     */
    private getFragmentsForSchema(apiDiscoveryUrl, schema, apiPath, tasks);
    /**
     * Generate API file given discovery URL
     * @param  {String} apiDiscoveryUri URL or filename of discovery doc for API
     * @param {function} callback Callback when successful write of API
     * @throws {Error} If there is an error generating the API.
     */
    generateAPI(apiDiscoveryUrl: any, callback: Function): void;
}
